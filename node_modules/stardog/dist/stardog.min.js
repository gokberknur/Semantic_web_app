!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.stardogjs=t()}(this,function(){"use strict";var e="stardog",t="1.1.1",r="Stardog JavaScript Framework for node.js and the browser - Develop apps using the Stardog RDF Database & JS.",n=["stardog","rdf","sparql","library","semantic web","linked data","query"],o="lib/index.js",a="dist/stardog.js",i="lib/index.d.ts",s={name:"Stardog Union",url:"http://stardog.com"},u="Apache-2.0",d=[{name:"Edgar Rodriguez",email:"edgar@complexible.com"},{name:"Fernando Hernandez",email:"fernando@complexible.com"},{name:"Maurice Rabb",email:"github@mauricerabb.com"},{name:"Laszlo"},{name:"Jonathan Abourbih",email:"jon.abourbih+github@gmail.com"},{name:"Andhika Nugraha",email:"andhika.nugraha@outlook.com"},{name:"BeArnis"},{name:"Ron Michael Zettlemoyer",email:"ron@zettlemoyer.com"},{name:"Stephen Nowell",email:"stephen@stardog.com"},{name:"Jason Rogers",email:"jason@stardog.com"},{name:"Adam Bretz",email:"arbretz@gmail.com"},{name:"sofayam"}],c={type:"git",url:"https://github.com/stardog-union/stardog.js"},h={url:"https://github.com/stardog-union/stardog.js/issues"},l={"fetch-ponyfill":"^4.1.0",flat:"^2.0.1","form-data":"^2.2.0","isomorphic-base64":"^1.0.2",lodash:"^4.17.4",querystring:"^0.2.0"},p={"@types/jest":"^20.0.2","@types/node-fetch":"^1.6.7","babel-plugin-transform-es2015-modules-commonjs":"^6.24.1","babel-preset-es2015-rollup":"^3.0.0",chalk:"^2.0.1",eslint:"^4.2.0","eslint-config-airbnb-base":"^11.2.0","eslint-config-prettier":"^2.3.0","eslint-plugin-import":"^2.7.0","eslint-plugin-prettier":"^2.1.2",husky:"^0.13.4",jest:"^20.0.4","lint-staged":"^4.0.0",mdchangelog:"^0.8.0",prettier:"^1.4.4",randomstring:"^1.1.5",rollup:"^0.43.0","rollup-plugin-babel":"^2.7.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-eslint":"^3.0.0","rollup-plugin-json":"^2.3.0","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-uglify":"^2.0.1",typedocs:"^0.6.3"},f={node:">=6.0.0"},v={build:"node scripts/build",docs:"node scripts/docs",test:"eslint '{lib,test}/**/*.js' --fix && jest test/*.spec.js --verbose -i",precommit:"lint-staged",format:"prettier '{lib,test}/**/*.js' --single-quote --trailing-comma es5 --write",version:"mdchangelog --remote stardog-union/stardog.js --no-prologue --order-milestones semver --order-issues closed_at --overwrite --no-orphan-issues && npm run docs && git add README.md CHANGELOG.md",prepublishOnly:"npm run build"},y={name:e,version:t,description:r,keywords:n,main:o,browser:a,types:i,author:s,license:u,contributors:d,repository:c,bugs:h,dependencies:l,devDependencies:p,engines:f,scripts:v,"lint-staged":{linters:{"{lib,test}/**/*.js":["prettier --single-quote --trailing-comma es5 --write","git add"]}},"stardog-version":">=5.0.0"},g=Object.freeze({name:e,version:t,description:r,keywords:n,main:o,browser:a,types:i,author:s,license:u,contributors:d,repository:c,bugs:h,dependencies:l,devDependencies:p,engines:f,scripts:v,default:y}),m="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function b(e,t){return e(t={exports:{}},t.exports),t.exports}var T=b(function(e,t){!function(t){function r(e){var r=e&&e.Promise||t.Promise,n=e&&e.XMLHttpRequest||t.XMLHttpRequest,o=t;return function(){var e=Object.create(o,{fetch:{value:void 0,writable:!0}});return function(e){if(!e.fetch){var t={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(t.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=function(e){return e&&DataView.prototype.isPrototypeOf(e)},i=ArrayBuffer.isView||function(e){return e&&o.indexOf(Object.prototype.toString.call(e))>-1};l.prototype.append=function(e,t){e=d(e),t=c(t);var r=this.map[e];this.map[e]=r?r+","+t:t},l.prototype.delete=function(e){delete this.map[d(e)]},l.prototype.get=function(e){return e=d(e),this.has(e)?this.map[e]:null},l.prototype.has=function(e){return this.map.hasOwnProperty(d(e))},l.prototype.set=function(e,t){this.map[d(e)]=c(t)},l.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},l.prototype.keys=function(){var e=[];return this.forEach(function(t,r){e.push(r)}),h(e)},l.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),h(e)},l.prototype.entries=function(){var e=[];return this.forEach(function(t,r){e.push([r,t])}),h(e)},t.iterable&&(l.prototype[Symbol.iterator]=l.prototype.entries);var s=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];m.prototype.clone=function(){return new m(this,{body:this._bodyInit})},g.call(m.prototype),g.call(T.prototype),T.prototype.clone=function(){return new T(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},T.error=function(){var e=new T(null,{status:0,statusText:""});return e.type="error",e};var u=[301,302,303,307,308];T.redirect=function(e,t){if(-1===u.indexOf(t))throw new RangeError("Invalid status code");return new T(null,{status:t,headers:{location:e}})},e.Headers=l,e.Request=m,e.Response=T,e.fetch=function(e,o){return new r(function(r,a){var i=new m(e,o),s=new n;s.onload=function(){var e,t,n={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new l,e.split(/\r?\n/).forEach(function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}}),t)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;r(new T(o,n))},s.onerror=function(){a(new TypeError("Network request failed"))},s.ontimeout=function(){a(new TypeError("Network request failed"))},s.open(i.method,i.url,!0),"include"===i.credentials&&(s.withCredentials=!0),"responseType"in s&&t.blob&&(s.responseType="blob"),i.headers.forEach(function(e,t){s.setRequestHeader(t,e)}),s.send(void 0===i._bodyInit?null:i._bodyInit)})},e.fetch.polyfill=!0}function d(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function c(e){return"string"!=typeof e&&(e=String(e)),e}function h(e){var r={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t.iterable&&(r[Symbol.iterator]=function(){return r}),r}function l(e){this.map={},e instanceof l?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function p(e){if(e.bodyUsed)return r.reject(new TypeError("Already read"));e.bodyUsed=!0}function f(e){return new r(function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}})}function v(e){var t=new FileReader,r=f(t);return t.readAsArrayBuffer(e),r}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function g(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(t.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(t.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(t.arrayBuffer&&t.blob&&a(e))this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!t.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!i(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=y(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},t.blob&&(this.blob=function(){var e=p(this);if(e)return e;if(this._bodyBlob)return r.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return r.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return r.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||r.resolve(this._bodyArrayBuffer):this.blob().then(v)}),this.text=function(){var e,t,n,o=p(this);if(o)return o;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=f(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return r.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return r.resolve(this._bodyText)},t.formData&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}function m(e,t){var r,n,o=(t=t||{}).body;if(e instanceof m){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new l(e.headers)),this.method=e.method,this.mode=e.mode,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new l(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),s.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var r=e.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}}),t}function T(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new l(t.headers),this.url=t.url||"",this._initBody(e)}}(void 0!==e?e:this),{fetch:e.fetch,Headers:e.Headers,Request:e.Request,Response:e.Response}}()}e.exports=r}("undefined"==typeof self?m:self)})(),j={atob:self.atob.bind(self),btoa:self.btoa.bind(self)},q=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},w=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),O=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{!n&&s.return&&s.return()}finally{if(o)throw a}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),x=T.Headers,_=T.Request,A=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments[1];q(this,e),this.config(t,r)}return w(e,[{key:"config",value:function(e,t){var r=Object.assign({},this,e,{meta:t});r.endpoint&&r.endpoint.lastIndexOf("/")===r.endpoint.length-1&&(r.endpoint=r.endpoint.slice(0,-1)),this.endpoint=r.endpoint,this.username=r.username,this.password=r.password,this.meta=r.meta}},{key:"headers",value:function(){var e=new x;return e.set("Authorization","Basic "+j.btoa(this.username+":"+this.password)),e.set("Accept","*/*"),e}},{key:"uri",value:function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.endpoint+"/"+t.join("/")}},{key:"request",value:function(){return this.meta&&this.meta.createRequest?this.meta.createRequest({uri:this.uri.apply(this,arguments),Request:_}):this.uri.apply(this,arguments)}}]),e}(),S="object"==typeof self?self.FormData:window.FormData;var P=function(e,t,r,n){t=t||"&",r=r||"=";var o={};if("string"!=typeof e||0===e.length)return o;var a=/\+/g;e=e.split(t);var i=1e3;n&&"number"==typeof n.maxKeys&&(i=n.maxKeys);var s,u,d=e.length;i>0&&d>i&&(d=i);for(var c=0;c<d;++c){var h,l,p,f,v=e[c].replace(a,"%20"),y=v.indexOf(r);y>=0?(h=v.substr(0,y),l=v.substr(y+1)):(h=v,l=""),p=decodeURIComponent(h),f=decodeURIComponent(l),s=o,u=p,Object.prototype.hasOwnProperty.call(s,u)?Array.isArray(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o},E=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}},U=function(e,t,r,n){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map(function(n){var o=encodeURIComponent(E(n))+r;return Array.isArray(e[n])?e[n].map(function(e){return o+encodeURIComponent(E(e))}).join(t):o+encodeURIComponent(E(e[n]))}).join(t):n?encodeURIComponent(E(n))+r+encodeURIComponent(E(e)):""},B=b(function(e,t){t.decode=t.parse=P,t.encode=t.stringify=U}),C=function(e){return null!=e&&(I(e)||"function"==typeof(t=e).readFloatLE&&"function"==typeof t.slice&&I(t.slice(0,0))||!!e._isBuffer);var t};function I(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var R=b(function(e){e.exports=t;function t(e,t){var r=(t=t||{}).delimiter||".",n=t.maxDepth,o={};return function e(a,i,s){s=s||1,Object.keys(a).forEach(function(u){var d=a[u],c=t.safe&&Array.isArray(d),h=Object.prototype.toString.call(d),l=C(d),p=i?i+r+u:u;if(!c&&!l&&("[object Object]"===h||"[object Array]"===h)&&Object.keys(d).length&&(!t.maxDepth||s<n))return e(d,p,s+1);o[p]=d})}(e),o}t.flatten=t,t.unflatten=function e(t,r){r=r||{};var n=r.delimiter||".";var o=r.overwrite||!1;var a={};var i=C(t);if(i||"[object Object]"!==Object.prototype.toString.call(t))return t;function s(e){var t=Number(e);return isNaN(t)||-1!==e.indexOf(".")?e:t}Object.keys(t).forEach(function(i){for(var u=i.split(n),d=s(u.shift()),c=s(u[0]),h=a;void 0!==c;){var l=Object.prototype.toString.call(h[d]),p="[object Object]"===l||"[object Array]"===l;if(!o&&!p&&void 0!==h[d])return;(o&&!p||!o&&null==h[d])&&(h[d]="number"!=typeof c||r.object?{}:[]),h=h[d],u.length>0&&(d=s(u.shift()),c=s(u[0]))}h[d]=e(t[i],r)});return a}}),D=Array.isArray,k="object"==typeof m&&m&&m.Object===Object&&m,z="object"==typeof self&&self&&self.Object===Object&&self,F=k||z||Function("return this")(),L=F.Symbol,N=Object.prototype,J=N.hasOwnProperty,G=N.toString,H=L?L.toStringTag:void 0;var M=function(e){var t=J.call(e,H),r=e[H];try{e[H]=void 0;var n=!0}catch(e){}var o=G.call(e);return n&&(t?e[H]=r:delete e[H]),o},$=Object.prototype.toString;var K=function(e){return $.call(e)},X="[object Null]",V="[object Undefined]",W=L?L.toStringTag:void 0;var Z=function(e){return null==e?void 0===e?V:X:W&&W in Object(e)?M(e):K(e)};var Q=function(e){return null!=e&&"object"==typeof e},Y="[object Symbol]";var ee=function(e){return"symbol"==typeof e||Q(e)&&Z(e)==Y},te=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,re=/^\w*$/;var ne=function(e,t){if(D(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!ee(e))||re.test(e)||!te.test(e)||null!=t&&e in Object(t)};var oe=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},ae="[object AsyncFunction]",ie="[object Function]",se="[object GeneratorFunction]",ue="[object Proxy]";var de,ce=function(e){if(!oe(e))return!1;var t=Z(e);return t==ie||t==se||t==ae||t==ue},he=F["__core-js_shared__"],le=(de=/[^.]+$/.exec(he&&he.keys&&he.keys.IE_PROTO||""))?"Symbol(src)_1."+de:"";var pe=function(e){return!!le&&le in e},fe=Function.prototype.toString;var ve=function(e){if(null!=e){try{return fe.call(e)}catch(e){}try{return e+""}catch(e){}}return""},ye=/^\[object .+?Constructor\]$/,ge=Function.prototype,me=Object.prototype,be=ge.toString,Te=me.hasOwnProperty,je=RegExp("^"+be.call(Te).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var qe=function(e){return!(!oe(e)||pe(e))&&(ce(e)?je:ye).test(ve(e))};var we=function(e,t){return null==e?void 0:e[t]};var Oe=function(e,t){var r=we(e,t);return qe(r)?r:void 0},xe=Oe(Object,"create");var _e=function(){this.__data__=xe?xe(null):{},this.size=0};var Ae=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Se="__lodash_hash_undefined__",Pe=Object.prototype.hasOwnProperty;var Ee=function(e){var t=this.__data__;if(xe){var r=t[e];return r===Se?void 0:r}return Pe.call(t,e)?t[e]:void 0},Ue=Object.prototype.hasOwnProperty;var Be=function(e){var t=this.__data__;return xe?void 0!==t[e]:Ue.call(t,e)},Ce="__lodash_hash_undefined__";var Ie=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=xe&&void 0===t?Ce:t,this};function Re(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Re.prototype.clear=_e,Re.prototype.delete=Ae,Re.prototype.get=Ee,Re.prototype.has=Be,Re.prototype.set=Ie;var De=Re;var ke=function(){this.__data__=[],this.size=0};var ze=function(e,t){return e===t||e!=e&&t!=t};var Fe=function(e,t){for(var r=e.length;r--;)if(ze(e[r][0],t))return r;return-1},Le=Array.prototype.splice;var Ne=function(e){var t=this.__data__,r=Fe(t,e);return!(r<0||(r==t.length-1?t.pop():Le.call(t,r,1),--this.size,0))};var Je=function(e){var t=this.__data__,r=Fe(t,e);return r<0?void 0:t[r][1]};var Ge=function(e){return Fe(this.__data__,e)>-1};var He=function(e,t){var r=this.__data__,n=Fe(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this};function Me(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Me.prototype.clear=ke,Me.prototype.delete=Ne,Me.prototype.get=Je,Me.prototype.has=Ge,Me.prototype.set=He;var $e=Me,Ke=Oe(F,"Map");var Xe=function(){this.size=0,this.__data__={hash:new De,map:new(Ke||$e),string:new De}};var Ve=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e};var We=function(e,t){var r=e.__data__;return Ve(t)?r["string"==typeof t?"string":"hash"]:r.map};var Ze=function(e){var t=We(this,e).delete(e);return this.size-=t?1:0,t};var Qe=function(e){return We(this,e).get(e)};var Ye=function(e){return We(this,e).has(e)};var et=function(e,t){var r=We(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this};function tt(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}tt.prototype.clear=Xe,tt.prototype.delete=Ze,tt.prototype.get=Qe,tt.prototype.has=Ye,tt.prototype.set=et;var rt=tt,nt="Expected a function";function ot(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(nt);var r=function(){var n=arguments,o=t?t.apply(this,n):n[0],a=r.cache;if(a.has(o))return a.get(o);var i=e.apply(this,n);return r.cache=a.set(o,i)||a,i};return r.cache=new(ot.Cache||rt),r}ot.Cache=rt;var at=ot,it=500;var st=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ut=/\\(\\)?/g,dt=function(e){var t=at(e,function(e){return r.size===it&&r.clear(),e}),r=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(st,function(e,r,n,o){t.push(n?o.replace(ut,"$1"):r||e)}),t});var ct=function(e,t){for(var r=-1,n=null==e?0:e.length,o=Array(n);++r<n;)o[r]=t(e[r],r,e);return o},ht=1/0,lt=L?L.prototype:void 0,pt=lt?lt.toString:void 0;var ft=function e(t){if("string"==typeof t)return t;if(D(t))return ct(t,e)+"";if(ee(t))return pt?pt.call(t):"";var r=t+"";return"0"==r&&1/t==-ht?"-0":r};var vt=function(e){return null==e?"":ft(e)};var yt=function(e,t){return D(e)?e:ne(e,t)?[e]:dt(vt(e))},gt=1/0;var mt=function(e){if("string"==typeof e||ee(e))return e;var t=e+"";return"0"==t&&1/e==-gt?"-0":t};var bt=function(e,t){for(var r=0,n=(t=yt(t,e)).length;null!=e&&r<n;)e=e[mt(t[r++])];return r&&r==n?e:void 0};var Tt=function(e,t,r){var n=null==e?void 0:bt(e,t);return void 0===n?r:n},jt=function(){try{var e=Oe(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();var qt=function(e,t,r){"__proto__"==t&&jt?jt(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r},wt=Object.prototype.hasOwnProperty;var Ot=function(e,t,r){var n=e[t];wt.call(e,t)&&ze(n,r)&&(void 0!==r||t in e)||qt(e,t,r)},xt=9007199254740991,_t=/^(?:0|[1-9]\d*)$/;var At=function(e,t){var r=typeof e;return!!(t=null==t?xt:t)&&("number"==r||"symbol"!=r&&_t.test(e))&&e>-1&&e%1==0&&e<t};var St=function(e,t,r,n){if(!oe(e))return e;for(var o=-1,a=(t=yt(t,e)).length,i=a-1,s=e;null!=s&&++o<a;){var u=mt(t[o]),d=r;if(o!=i){var c=s[u];void 0===(d=n?n(c,u,s):void 0)&&(d=oe(c)?c:At(t[o+1])?[]:{})}Ot(s,u,d),s=s[u]}return e};var Pt=function(e,t,r){for(var n=-1,o=t.length,a={};++n<o;){var i=t[n],s=bt(e,i);r(s,i)&&St(a,yt(i,e),s)}return a};var Et=function(e,t){return null!=e&&t in Object(e)},Ut="[object Arguments]";var Bt=function(e){return Q(e)&&Z(e)==Ut},Ct=Object.prototype,It=Ct.hasOwnProperty,Rt=Ct.propertyIsEnumerable,Dt=Bt(function(){return arguments}())?Bt:function(e){return Q(e)&&It.call(e,"callee")&&!Rt.call(e,"callee")},kt=9007199254740991;var zt=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=kt};var Ft=function(e,t,r){for(var n=-1,o=(t=yt(t,e)).length,a=!1;++n<o;){var i=mt(t[n]);if(!(a=null!=e&&r(e,i)))break;e=e[i]}return a||++n!=o?a:!!(o=null==e?0:e.length)&&zt(o)&&At(i,o)&&(D(e)||Dt(e))};var Lt=function(e,t){return null!=e&&Ft(e,t,Et)};var Nt=function(e,t){return Pt(e,t,function(t,r){return Lt(e,r)})};var Jt=function(e,t){for(var r=-1,n=t.length,o=e.length;++r<n;)e[o+r]=t[r];return e},Gt=L?L.isConcatSpreadable:void 0;var Ht=function(e){return D(e)||Dt(e)||!!(Gt&&e&&e[Gt])};var Mt=function e(t,r,n,o,a){var i=-1,s=t.length;for(n||(n=Ht),a||(a=[]);++i<s;){var u=t[i];r>0&&n(u)?r>1?e(u,r-1,n,o,a):Jt(a,u):o||(a[a.length]=u)}return a};var $t=function(e){return null!=e&&e.length?Mt(e,1):[]};var Kt=function(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)},Xt=Math.max;var Vt=function(e,t,r){return t=Xt(void 0===t?e.length-1:t,0),function(){for(var n=arguments,o=-1,a=Xt(n.length-t,0),i=Array(a);++o<a;)i[o]=n[t+o];o=-1;for(var s=Array(t+1);++o<t;)s[o]=n[o];return s[t]=r(i),Kt(e,this,s)}};var Wt=function(e){return function(){return e}};var Zt=jt?function(e,t){return jt(e,"toString",{configurable:!0,enumerable:!1,value:Wt(t),writable:!0})}:function(e){return e},Qt=800,Yt=16,er=Date.now;var tr=function(e){var t=0,r=0;return function(){var n=er(),o=Yt-(n-r);if(r=n,o>0){if(++t>=Qt)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(Zt);var rr=function(e){return tr(Vt(e,void 0,$t),e+"")}(function(e,t){return null==e?{}:Nt(e,t)}),nr=b(function(e){var t=["status","statusText","headers","ok","url"];e.exports={httpBody:function(e){var r=e.headers.get("content-type"),n=rr(e,t);return r&&r.indexOf("json")>-1?e.json().then(function(e){return n.body=e,n}):e.text().then(function(t){var o=t.trim();return n.body=o,"text/boolean"===r&&(n.body="true"===o.toLowerCase()),204===e.status&&(n.body=null),""===o&&(n.body=null),n})},httpMessage:function(e){return rr(e,t)}}}),or={database:{archetypes:null,connection:{timeout:null},creator:null,name:null,namespaces:null,online:null,time:{creation:null,modification:null}},docs:{default:{rdf:{extractors:null},text:{extractors:null}},filesystem:{uri:null},path:null},icv:{active:{graphs:null},consistency:{automatic:null},enabled:null,reasoning:{enabled:null}},index:{differential:{enable:{limit:null},merge:{limit:null},size:null},disk:{page:{count:{total:null,used:null},fill:{ratio:null}}},last:{tx:null},literals:{canonical:null},named:{graphs:null},persist:null,size:null,statistics:{update:{automatic:null}},type:null},preserve:{bnode:{ids:null}},progress:{monitor:{enabled:null}},query:{all:{graphs:null},plan:{reuse:null},timeout:null},reasoning:{approximate:null,classify:{eager:null},consistency:{automatic:null},punning:{enabled:null},sameas:null,schema:{graphs:null,timeout:null},type:null,virtual:{graph:{enabled:null}}},search:{default:{limit:null},enabled:null,index:{datatypes:null},reindex:{tx:null},wildcard:{search:{enabled:null}}},security:{named:{graphs:null}},spatial:{enabled:null,index:{version:null},precision:null},strict:{parsing:null},transaction:{isolation:null,logging:null},versioning:{directory:null,enabled:null}},ar=b(function(e){var t=T.fetch,r=nr.httpBody,n=function(e,r,n){return r.headers.set("Content-Type","application/json"),t(e.request("admin","databases",r.database,"options"),{method:r.method,headers:r.headers,body:JSON.stringify(R(n,{safe:!0}))})};e.exports={get:function(e,t,o){var a=e.headers();return n(e,{headers:a,database:t,method:"PUT"},or).then(r).then(function(e){return 200===e.status?Object.assign({},e,{body:R.unflatten(e.body)}):e})},set:function(e,t,o,a){var i=e.headers();return n(e,{headers:i,database:t,method:"POST"},o).then(r)}}}),ir=b(function(e){var t=T.fetch,r=nr.httpBody,n=ar.get,o=function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=e.headers();i.set("Accept","text/plan"),i.set("Content-Type",n.contentType||"text/plain"),n.encoding&&i.set("Content-Encoding",n.encoding);var s={};a.graphUri&&(s["graph-uri"]=a.graphUri);var u=B.stringify(s),d=n.resource+(u.length>0?"?"+u:"");return t(e.request(n.database,n.transactionId,d),{method:"POST",headers:i,body:n.content+""}).then(r).then(function(e){return Object.assign({},e,{transactionId:n.transactionId})})};e.exports={create:function(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=(arguments[4],e.headers()),s=R(o),u=new S;return u.append("root",JSON.stringify({dbname:n,options:s,files:a.files})),t(e.request("admin","databases"),{method:"POST",headers:i,body:u}).then(r)},drop:function(e,n,o){var a=e.headers();return t(e.request("admin","databases",n),{method:"DELETE",headers:a}).then(r)},get:function(e,n,o){var a=e.headers();return t(e.request(n),{headers:a}).then(r)},offline:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","databases",n,"offline"),{method:"PUT",headers:a}).then(r)},online:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","databases",n,"online"),{method:"PUT",headers:a}).then(r)},optimize:function(e,n,o){var a=e.headers();return t(e.request("admin","databases",n,"optimize"),{method:"PUT",headers:a}).then(r)},copy:function(e,n,o,a){var i=e.headers();i.set("Accept","application/json");var s="copy?"+B.stringify({to:o});return t(e.request("admin","databases",n,s),{method:"PUT",headers:i}).then(r)},list:function(e,n){var o=e.headers();return o.set("Accept","application/json"),t(e.request("admin","databases"),{headers:o}).then(r)},size:function(e,n,o){var a=e.headers();return a.set("Accept","text/plain"),t(e.request(n,"size"),{headers:a}).then(r)},clear:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=e.headers();i.set("Accept","text/plain");var s={};a.graphUri&&(s["graph-uri"]=a.graphUri);var u=B.stringify(s),d="clear"+(u.length>0?"?"+u:"");return t(e.request(n,o,d),{method:"POST",headers:i}).then(r).then(function(e){return Object.assign({},e,{transactionId:o})})},add:function(e,t,r,n){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};return o(e,{contentType:a.contentType,encoding:a.encoding,resource:"add",database:t,transactionId:r,content:n},i)},remove:function(e,t,r,n){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};return o(e,{contentType:a.contentType,encoding:a.encoding,resource:"remove",database:t,transactionId:r,content:n},i)},namespaces:function(e,t,r){return n(e,t,r).then(function(e){if(200===e.status){var t=Tt(e,"body.database.namespaces",[]).reduce(function(e,t){var r,n,o,a=t.split("="),i=O(a,2),s=i[0],u=i[1];return Object.assign({},e,(o=u,(n=s)in(r={})?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,r))},{});e.body=t}return e})},exportData:function(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=e.headers();i.set("Accept",o.mimetype||"application/ld+json");var s={"graph-uri":a.graphUri||"tag:stardog:api:context:all"},u="export?"+B.stringify(s);return t(e.request(n,u),{headers:i}).then(r)}}}),sr=b(function(e){var t=T.fetch,r=nr.httpBody;e.exports={add:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers());return i.set("Content-Type",a.contentType||"text/turtle"),t(e.request(n,"icv","add"),{method:"POST",body:o,headers:i}).then(r)},remove:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers());return i.set("Content-Type",a.contentType||"text/turtle"),t(e.request(n,"icv","remove"),{method:"POST",body:o,headers:i}).then(r)},get:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return o.set("Accept","application/ld+json"),t(e.request(n,"icv"),{headers:o}).then(r)},clear:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request(n,"icv","clear"),{method:"POST",headers:o}).then(r)},convert:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},s=e.headers();s.set("Content-Type",a.contentType||"text/turtle");var u={};i.graphUri&&(u["graph-uri"]=i.graphUri);var d=B.stringify(u),c="convert"+(d.length>0?"?"+d:"");return t(e.request(n,"icv",c),{method:"POST",body:o,headers:s}).then(r)},validate:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},s=e.headers();s.set("Content-Type",a.contentType||"text/turtle"),s.set("Accept","text/boolean");var u={};i.graphUri&&(u["graph-uri"]=i.graphUri);var d=B.stringify(u),c="validate"+(d.length>0?"?"+d:"");return t(e.request(n,"icv",c),{method:"POST",body:o,headers:s}).then(r)},validateInTx:function(e,n,o,a){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},u=e.headers();u.set("Content-Type",i.contentType||"text/turtle"),u.set("Accept","text/boolean");var d={};s.graphUri&&(d["graph-uri"]=s.graphUri);var c=B.stringify(d),h="validate"+(c.length>0?"?"+c:"");return t(e.request(n,"icv",o,h),{method:"POST",body:a,headers:u}).then(r)},violations:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},s=e.headers();s.set("Content-Type",a.contentType||"text/turtle"),s.set("Accept","*/*");var u={};i.graphUri&&(u["graph-uri"]=i.graphUri);var d=B.stringify(u),c="violations"+(d.length>0?"?"+d:"");return t(e.request(n,"icv",c),{method:"POST",body:o,headers:s}).then(r)},violationsInTx:function(e,n,o,a){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},u=e.headers();u.set("Content-Type",i.contentType||"text/turtle"),u.set("Accept","*/*");var d={};s.graphUri&&(d["graph-uri"]=s.graphUri);var c=B.stringify(d),h="violations"+(c.length>0?"?"+c:"");return t(e.request(n,"icv",o,h),{method:"POST",body:a,headers:u}).then(r)}}}),ur=b(function(e){var t=T.fetch,r=nr.httpBody,n=function(e){return function(t){return Object.assign({},t,{transactionId:e})}};e.exports={begin:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return o.set("Accept","*/*"),t(e.request(n,"transaction","begin"),{method:"POST",headers:o}).then(r).then(function(e){return Object.assign({},e,{transactionId:e.body})})},rollback:function(e,o,a){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var i=e.headers();return t(e.request(o,"transaction","rollback",a),{method:"POST",headers:i}).then(r).then(n(a))},commit:function(e,o,a){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var i=e.headers();return t(e.request(o,"transaction","commit",a),{method:"POST",headers:i}).then(r).then(n(a))}}}),dr=b(function(e){var t=T.fetch,r=nr.httpBody;e.exports={doGet:function(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"application/ld+json",i=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers());i.set("Accept",a);var s=n+"?"+(o?B.stringify({graph:o}):"default");return t(e.request(s),{headers:i}).then(r)},doPut:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"application/ld+json",s=(arguments.length>5&&void 0!==arguments[5]&&arguments[5],e.headers());s.set("Content-Type",i);var u=n+"?"+(a?B.stringify({graph:a}):"default");return t(e.request(u),{headers:s,method:"PUT",body:o}).then(r)},doPost:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"application/ld+json",s=(arguments.length>5&&void 0!==arguments[5]&&arguments[5],e.headers());s.set("Content-Type",i);var u=n+"?"+(a?B.stringify({graph:a}):"default");return t(e.request(u),{headers:s,method:"POST",body:o}).then(r)},doDelete:function(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],e.headers()),i=n+"?"+(o?B.stringify({graph:o}):"default");return t(e.request(i),{headers:a,method:"DELETE"}).then(r)}}}),cr=b(function(e){var t=T.fetch,r=nr.httpBody,n=function(e){return e.headers.set("Content-Type","application/json"),e};e.exports={consistency:function(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],e.headers());a.set("Accept","text/boolean");var i="consistency"+(o.namedGraph?"?graph-uri="+o.namedGraph:"");return t(e.request(n,"reasoning",i),{headers:a}).then(r)},explainInference:function(e,o,a,i,s){var u=e.headers();return u.set("Content-Type",i.contentType),u.set("Accept","application/json"),t(e.request(o,"reasoning","explain"),{method:"POST",headers:u,body:a}).then(n).then(r)},explainInconsistency:function(e,o){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=(arguments.length>3&&void 0!==arguments[3]&&arguments[3],e.headers());i.set("Accept","application/json");var s="inconsistency"+(a.namedGraph?"?graph-uri="+a.namedGraph:"");return t(e.request(o,"reasoning","explain",s),{method:"POST",headers:i}).then(n).then(r)},explainInferenceInTransaction:function(e,n,o,a,i){arguments.length>5&&void 0!==arguments[5]&&arguments[5];var s=e.headers();return s.set("Content-Type",i.contentType),i.encoding&&s.set("Content-Encoding",i.encoding),t(e.request(n,"reasoning",o,"explain"),{method:"POST",headers:s,body:a}).then(r)},explainInconsistencyInTransaction:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers()),s="inconsistency"+(a.namedGraph?"?graph-uri="+a.namedGraph:"");return t(e.request(n,"reasoning",o,"explain",s),{method:"POST",headers:i}).then(r)},schema:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return o.set("Accept","application/ld+json"),t(e.request(n,"reasoning","schema"),{headers:o}).then(r)}}}),hr=b(function(e){var t=T.fetch,r=nr.httpBody;e.exports={size:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return o.set("Accept","text/plain"),t(e.request(n,"docs","size"),{headers:o}).then(r)},clear:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request(n,"docs"),{method:"DELETE",headers:o}).then(r)},add:function(e,n,o,a){arguments.length>4&&void 0!==arguments[4]&&arguments[4];var i=e.headers(),s=new S;return s.append("upload",new Buffer(a),{filename:o}),t(e.request(n,"docs"),{method:"POST",body:s,headers:i}).then(r)},remove:function(e,n,o){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var a=e.headers();return t(e.request(n,"docs",o),{method:"DELETE",headers:a}).then(r)},get:function(e,n,o){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var a=e.headers();return t(e.request(n,"docs",o),{headers:a}).then(r)}}}),lr=b(function(e){var t=function(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t},r=function(e){var r=e.replace(/prefix[^:]+:\s*<[^>]*>\s*/gi,"").replace(/^((base\s+<[^>]*>\s*)|([\t ]*#([^\n\r]*)))([\r|\r\n|\n])/gim,"").replace(/\s/g,"").toLowerCase();return t(r,"select")?"select":t(r,"ask")?"ask":t(r,"construct")?"construct":t(r,"describe")?"describe":t(r,"insert")||t(r,"delete")||t(r,"with")||t(r,"load")||t(r,"clear")||t(r,"create")||t(r,"drop")||t(r,"copy")||t(r,"move")||t(r,"add")?"update":t(r,"paths")?"paths":null};e.exports={queryType:r,mimeType:function(e){var t=r(e);return"select"===t||"paths"===t?"application/sparql-results+json":"ask"===t||"update"===t?"text/boolean":"construct"===t||"describe"===t?"text/turtle":"*/*"}}}),pr=b(function(e){var t=T.fetch,r=nr.httpBody,n=lr.mimeType;e.exports={query:function(e,o,a){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:n(a),s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},u=e.headers();u.set("Accept",i),u.set("Content-Type","application/x-www-form-urlencoded");var d=B.stringify(s),c="query"+(d.length>0?"?"+d:"");return t(e.request(o,"vcs",c),{method:"POST",body:B.stringify({query:a}),headers:u}).then(r)},commit:function(e,n,o,a){arguments.length>4&&void 0!==arguments[4]&&arguments[4];var i=e.headers();return i.set("Content-Type","text/plain"),t(e.request(n,"vcs",o,"commit_msg"),{method:"POST",body:a,headers:i}).then(r)},createTag:function(e,n,o,a){arguments.length>4&&void 0!==arguments[4]&&arguments[4];var i=e.headers();return i.set("Content-Type","text/plain"),t(e.request(n,"vcs","tags","create"),{method:"POST",body:'"tag:stardog:api:versioning:version:'+o+'", "'+a+'"',headers:i}).then(r)},deleteTag:function(e,n,o){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var a=e.headers();return a.set("Content-Type","text/plain"),t(e.request(n,"vcs","tags","delete"),{method:"POST",body:o,headers:a}).then(r)},revert:function(e,n,o,a,i){arguments.length>5&&void 0!==arguments[5]&&arguments[5];var s=e.headers();return s.set("Content-Type","text/plain"),t(e.request(n,"vcs","revert"),{method:"POST",body:'"tag:stardog:api:versioning:version:'+a+'", "tag:stardog:api:versioning:version:'+o+'", "'+i+'"',headers:s}).then(r)}}}),fr=Object.assign({},ir,{icv:sr},{transaction:ur},{options:ar},{docs:hr},{versioning:pr},{graph:dr},{reasoning:cr}),vr=b(function(e){var t=T.fetch,r=nr.httpBody,n=lr.mimeType,o=lr.queryType,a=function(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:n.accept,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=e.headers();i.set("Accept",o),i.set("Content-Type","application/x-www-form-urlencoded");var s=B.stringify(a),u=n.resource+(s.length>0?"?"+s:"");return t(e.request(n.database,u),{method:"POST",body:B.stringify({query:n.query}),headers:i}).then(r).then(function(e){return e.body&&e.body.head&&e.body.head.vars&&(e.body.head.vars=[].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(new Set(e.body.head.vars)))),e})},i=function(e,t,r,i,s){var u=o(r);return a(e,{database:t,query:r,accept:n(r),resource:"update"===u?"update":"query"},i,s)};e.exports={execute:i,executeInTransaction:function(e,o,a,i){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},d=e.headers();d.set("Accept",s.accept||n(i)),d.set("Content-Type","application/x-www-form-urlencoded");var c=B.stringify(u),h="query"+(c.length>0?"?"+c:"");return t(e.request(o,a,h),{method:"POST",headers:d,body:B.stringify({query:i})}).then(r).then(function(e){return Object.assign({},e,{transactionId:a})})},property:function(e,t,r,n){return i(e,t,"select * where {\n      "+r.uri+" "+r.property+" ?val\n    }\n    ",n).then(function(e){var t=Tt(e,"body.results.bindings",[]);return t.length>0?Object.assign({},e,{body:t[0].val.value}):e})},list:function(e){var n=e.headers();return n.set("Accept","application/json"),t(e.request("admin","queries"),{headers:n}).then(r)},kill:function(e,n){var o=e.headers();return t(e.request("admin","queries",n),{method:"DELETE",headers:o}).then(r)},get:function(e,n){var o=e.headers();return o.set("Accept","application/json"),t(e.request("admin","queries",n),{headers:o}).then(r)},explain:function(e,n,o,a){var i=e.headers();i.set("Accept","text/plain"),i.set("Content-Type","application/x-www-form-urlencoded");var s=B.stringify(a),u="explain"+(s.length>0?"?"+s:"");return t(e.request(n,u),{method:"POST",headers:i,body:B.stringify({query:o})}).then(r)}}}),yr=b(function(e){var t=T.fetch,r=nr.httpBody;e.exports={create:function(e,n,o){var a=e.headers();a.set("Content-Type","application/json"),a.set("Accept","application/json");var i=rr(n,["name","database","query","shared"]);return i.creator=e.username,i.shared="boolean"==typeof i.shared&&i.shared,t(e.request("admin","queries","stored"),{headers:a,method:"POST",body:JSON.stringify(i)}).then(r)},list:function(e,n){var o=e.headers();return o.set("Accept","application/json"),t(e.request("admin","queries","stored"),{headers:o}).then(r)},remove:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","queries","stored",n),{headers:a,method:"DELETE"}).then(r)}}}),gr=b(function(e){var t=T.fetch,r=nr.httpBody;e.exports={execute:function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],e.headers());return t(e.request(n,"graphql"),{method:"POST",body:JSON.stringify({query:o,variables:a}),headers:i}).then(r)},listSchemas:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request(n,"graphql","schemas"),{headers:o}).then(r)},addSchema:function(e,n,o,a){arguments.length>4&&void 0!==arguments[4]&&arguments[4];var i=e.headers();return i.set("Content-Type","application/graphql"),t(e.request(n,"graphql","schemas",o),{method:"PUT",body:a,headers:i}).then(r)},getSchema:function(e,n,o){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var a=e.headers();return t(e.request(n,"graphql","schemas",o),{headers:a}).then(r)},removeSchema:function(e,n,o){arguments.length>3&&void 0!==arguments[3]&&arguments[3];var a=e.headers();return t(e.request(n,"graphql","schemas",o),{method:"DELETE",headers:a}).then(r)},clearSchemas:function(e,r){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var n=e.headers();return t(e.request(r,"graphql","schemas"),{method:"DELETE",headers:n})}}}),mr=Object.assign({},vr,{stored:yr},{graphql:gr},{utils:lr}),br=b(function(e){var t=T.fetch,r=nr.httpBody,n=nr.httpMessage;e.exports={list:function(e,n){var o=e.headers();return t(e.request("admin","users"),{headers:o}).then(r)},get:function(e,n,o){var a=e.headers();return t(e.request("admin","users",n),{headers:a}).then(r)},create:function(e,n,o){var a=e.headers();a.set("Accept","application/json"),a.set("Content-Type","application/json");var i={username:n.name,password:n.password.split(""),superuser:"boolean"==typeof n.superuser&&n.superuser};return t(e.request("admin","users"),{method:"POST",headers:a,body:JSON.stringify(i)}).then(r)},changePassword:function(e,r,o,a){var i=e.headers();i.set("Accept","application/json");var s={password:o};return t(e.request("admin","users",r,"pwd"),{method:"PUT",headers:i,body:JSON.stringify(s)}).then(n)},valid:function(e,n){var o=e.headers();return t(e.request("admin","users","valid"),{headers:o}).then(r)},enabled:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","users",n,"enabled"),{headers:a}).then(r)},enable:function(e,r,o,a){var i=e.headers();return t(e.request("admin","users",r,"enabled"),{method:"PUT",headers:i,body:JSON.stringify({enabled:o})}).then(n)},setRoles:function(e,r,o,a){var i=e.headers();return i.set("Content-Type","application/json"),t(e.request("admin","users",r,"roles"),{method:"PUT",headers:i,body:JSON.stringify({roles:o})}).then(n)},listRoles:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","users",n,"roles"),{headers:a}).then(r)},assignPermission:function(e,r,o,a){var i=e.headers(),s={action:o.action,resource_type:o.resourceType,resource:o.resources};return t(e.request("admin","permissions","user",r),{method:"PUT",headers:i,body:JSON.stringify(s)}).then(n)},deletePermission:function(e,r,o,a){var i=e.headers();i.set("Content-Type","application/json");var s={action:o.action,resource_type:o.resourceType,resource:o.resources};return t(e.request("admin","permissions","user",r,"delete"),{method:"POST",headers:i,body:JSON.stringify(s)}).then(n)},permissions:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","permissions","user",n),{headers:a}).then(r)},effectivePermissions:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","permissions","effective","user",n),{headers:a}).then(r)},superUser:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","users",n,"superuser"),{headers:a}).then(r)},remove:function(e,r,o){var a=e.headers();return t(e.request("admin","users",r),{method:"DELETE",headers:a}).then(n)}}}),Tr=b(function(e){var t=T.fetch,r=nr.httpBody,n=nr.httpMessage;e.exports={create:function(e,r,o){var a=e.headers();return t(e.request("admin","roles"),{method:"POST",headers:a,body:JSON.stringify({rolename:r.name})}).then(n)},list:function(e,n){var o=e.headers();return o.set("Accept","application/json"),t(e.request("admin","roles"),{headers:o}).then(r)},remove:function(e,r,o){var a=e.headers();return t(e.request("admin","roles",r),{method:"DELETE",headers:a}).then(n)},usersWithRole:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","roles",n,"users"),{headers:a}).then(r)},assignPermission:function(e,n,o,a){var i=e.headers();i.set("Content-Type","application/json");var s={action:o.action,resource_type:o.resourceType,resource:o.resources};return t(e.request("admin","permissions","role",n),{method:"PUT",headers:i,body:JSON.stringify(s)}).then(r)},deletePermission:function(e,r,o,a){var i=e.headers();i.set("Content-Type","application/json");var s={action:o.action,resource_type:o.resourceType,resource:o.resources};return t(e.request("admin","permissions","role",r,"delete"),{method:"POST",headers:i,body:JSON.stringify(s)}).then(n)},permissions:function(e,n,o){var a=e.headers();return a.set("Accept","application/json"),t(e.request("admin","permissions","role",n),{headers:a}).then(r)}}}),jr=Object.assign({},br,{role:Tr}),qr=b(function(e){var t=T.fetch,r=nr.httpMessage;e.exports={shutdown:function(e,n){var o=e.headers();return o.set("Accept","application/json"),t(e.request("admin","shutdown"),{headers:o}).then(r)}}}),wr=b(function(e){var t=T.fetch,r=nr.httpBody;e.exports={list:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var n=e.headers();return t(e.request("admin","virtual_graphs"),{headers:n}).then(r)},add:function(e,n,o,a){arguments.length>4&&void 0!==arguments[4]&&arguments[4];var i=e.headers();return i.set("Content-Type","application/json"),t(e.request("admin","virtual_graphs"),{method:"POST",body:JSON.stringify({name:n,mappings:o,options:a}),headers:i}).then(r)},update:function(e,n,o,a){arguments.length>4&&void 0!==arguments[4]&&arguments[4];var i=e.headers();return i.set("Content-Type","application/json"),t(e.request("admin","virtual_graphs",n),{method:"PUT",body:JSON.stringify({name:n,mappings:o,options:a}),headers:i}).then(r)},remove:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request("admin","virtual_graphs",n),{method:"DELETE",headers:o}).then(r)},available:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return o.set("Accept","application/json"),t(e.request("admin","virtual_graphs",n,"available"),{headers:o}).then(r)},options:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request("admin","virtual_graphs",n,"options"),{headers:o}).then(r)},mappings:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request("admin","virtual_graphs",n,"mappings"),{headers:o}).then(r)}}}),Or=b(function(e){var t=T.fetch,r=nr.httpBody;e.exports={add:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request("admin","functions","stored"),{method:"POST",body:n,headers:o}).then(r)},get:function(e,n){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var o=e.headers();return t(e.request("admin","functions","stored?"+B.stringify({name:n})),{headers:o}).then(r)},remove:function(e,r){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var n=e.headers();return t(e.request("admin","functions","stored?"+B.stringify({name:r})),{method:"DELETE",headers:n})},clear:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var r=e.headers();return t(e.request("admin","functions","stored"),{method:"DELETE",headers:r})},getAll:function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];var n=e.headers();return t(e.request("admin","functions","stored"),{headers:n}).then(r)}}});return{version:(g&&y||g).version,Connection:A,db:fr,query:mr,user:jr,server:qr,virtualGraphs:wr,storedFunctions:Or}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
